import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "../styles/Home.module.scss";
import { useState, useRef, useEffect } from "react";
import { supabase } from "@/utils/supabaseclient";
import { useRouter } from "next/router";
import axios from "axios";
import ImageWithLabels from "./ImageWithLabels";
import Predictionmap from "./Predictionmap";
import img from "../public/logo.jpg";

const inter = Inter({ subsets: ["latin"] });

export default function Home({ acne }) {
  const [imageFile, setImageFile] = useState(null);
  const imageFileRef = useRef(null);
  const router = useRouter();
  const [data, setData] = useState("");
  const [imageUrl, setImageUrl] = useState("");
  // console.log(acne);
  const uploadImage = async () => {
    const imageName = `${Date.now()}-${imageFile.name}`;

    const { data: list, error: err } = await supabase.storage
      .from("acne")
      .list("imgs");
    const filesToRemove = list.map((x) => `imgs/${x.name}`);
    const { data: data_acne, error: erroe_acne } = await supabase.storage
      .from("acne")
      .remove(filesToRemove);
    const { error } = await supabase.storage
      .from("acne")
      .upload(`imgs/${imageName}`, imageFile, {
        cacheControl: "3600",
        upsert: false,
      });

    if (error) return alert(error.message);

    // const { data } = await supabase.storage
    //   .from("acne")
    //   .getPublicUrl(`imgs/${imageName}`);

    const { data } = await supabase.storage
      .from("acne")
      .getPublicUrl(`imgs/${imageName}`);

    // console.log(new URL(data.publicUrl).href);
    return new URL(data.publicUrl).href;
  };

  const handleImageChange = (e) => {
    const image = e.target.files[0];

    if (image.size > 2000000) {
      alert("Image size must be less than 2MB");
      return;
    }

    setImageFile(image);
  };

  const onSubmit = async (e) => {
    e.preventDefault();
    let publicUrl = "";

    if (imageFile) {
      publicUrl = await uploadImage();

      axios({
        method: "POST",
        url: "https://detect.roboflow.com/acne_detection/1",

        params: {
          api_key: "G0DIx8ioXilhNZtj1Q4T",
          image: publicUrl,
          confidence: 30,
          format: "JPEG",
        },
      })
        .then(function (response) {
          console.dir(response);
          // const blob = new Blob([response.data], { type: "image/jpeg" });
          // const url = URL.createObjectURL(blob);

          setData(response);
          setImageUrl(publicUrl);
          console.log(data);
        })
        .catch(function (error) {
          console.log(error.message);
        });
    }

    router.replace(router.asPath);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.header}>
        <Image src={img}></Image>
        <div>
          {" "}
          <h1>Дипломна робота студента групи КН-42</h1>
          <h1>Комарніцького Іллі</h1>
        </div>
      </header>
      <div className={styles.main}>
        <div className={styles.wrapper}>
          {data && (
            <ImageWithLabels
              imageWidth={data.data.image.width}
              imageHeight={data.data.image.height}
              labels_arr={data.data.predictions}
              src={imageUrl}
            />
          )}
          {data && <Predictionmap predictions={data.data.predictions} />}
        </div>

        <form
          onSubmit={(e) => onSubmit(e)}
          className={styles.addCategory__form}
        >
          <label htmlFor="image">Зображення категорії</label>
          <input
            accept="image/*"
            type="file"
            name="image"
            id="image"
            ref={imageFileRef}
            onChange={handleImageChange}
          />

          <button type="submit"> submit</button>
        </form>
      </div>
    </>
  );
}

export async function getServerSideProps({ params }) {
  // const supabaseClient = createBrowserSupabaseClient()
  const temp = [];
  const { data: list, error: err } = await supabase.storage
    .from("acne")
    .list("imgs");
  list.map((image) => {
    const { data } = supabase.storage
      .from("acne")
      .getPublicUrl(`imgs/${image.name}`);
    temp.push(data.publicUrl);
  });
  if (err) return alert("no products");
  const temp_url = temp[0];
  return {
    props: { acne: temp },
  };
  // try {
  //   const response = await axios.post(
  //     "http://localhost:3000/api/acne",
  //     temp_url
  //   );
  //   return {
  //     props: { acne: response },
  //   };
  // } catch (error) {
  //   return {
  //     props: {
  //       error: error,
  //     },
  //   };
  // }
}
